
import React, { useEffect, useRef, useState } from 'react'
import './style.css'
import image1 from './image/nonotes.png'
import sendbutton from './image/sendbutton.png'
import arrowbutton from './image/arrow.png'
import CreateNoteForm from './CreateNoteForm'
function Page1() {
    document.addEventListener('keydown', (event) => { if (event.key === 'Enter') { handleupdatetime() } })
    const [NotesDetails, setMyNoteDetails] = useState({ note: '', notedate: '', notetime: "" })
    const [Showform, setMyShowForm] = useState(false)
    const formpop = useRef(false)
    const notelist = JSON.parse(localStorage.getItem('noteName'))

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (formpop.current && !formpop.current.contains(event.target)) {
                setMyShowForm(false);
            }
        };

        if (Showform) {
            document.addEventListener("mousedown", handleClickOutside);
        }

        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [Showform]);
    const [OpenNotes, setMyOpenNotes] = useState()
    const handlechange = (e) => {
        setMyNoteDetails({ ...NotesDetails, note: e.target.value })
    }
    const handleMobileview = () => {
        const element = document.getElementById('leftnotediv')
        const element2 = document.getElementById('rightnotediv')
        if (window.innerWidth <= 480) {
            element.style.display = 'none'
            element2.style.display = 'block'
        }
    }
    const handleMobileviewclose = () => {
        const element = document.getElementById('leftnotediv')
        const element2 = document.getElementById('rightnotediv')
        if (window.innerWidth <= 480) {
            element.style.display = 'block'
            element2.style.display = 'none'
        }
    }
    const handleopenNotes = (value) => {
        const [firstName, lastName] = value.name.split(" ");
        const firstCharFirstName = firstName ? firstName[0] : "";
        const firstCharLastName = lastName ? lastName[0] : '';
        const Iconname = firstCharFirstName + firstCharLastName
        value.iconname = Iconname
        setMyOpenNotes(value)
        handleMobileview()
    }
    const mynotes = JSON.parse(localStorage.getItem('submitnotes')) || [];
    const handleupdatetime = () => {
        const datetime = new Date()
        setMyNoteDetails(prestate => ({
            ...prestate,
            notedate: datetime.toDateString(),
            notetime: datetime.toLocaleTimeString("en-US", { hour: "2-digit", minute: "2-digit", hour12: true })
        }))
    }
    useEffect(() => {
        if (NotesDetails.notetime) {
            handlesubmit()
        }
    }, [NotesDetails.notetime])
    const handlesubmit = () => {
        const notesotre = [NotesDetails, ...(OpenNotes.notes ?? [])]
        if (!OpenNotes?.notes?.length) {
            OpenNotes.notes = notesotre
        }
        setMyOpenNotes(prestate => ({
            ...prestate,
            notes: notesotre
        }))

        if (mynotes.length === 0) {
            localStorage.setItem('submitnotes', JSON.stringify([OpenNotes]))
        } else if (Array.isArray(mynotes)) {
            let existnoteobject = mynotes.find(note => note.name === OpenNotes.name)
            if (existnoteobject) {
                // existnoteobject.notes=existnoteobject.note||[]
                existnoteobject.notes.push(NotesDetails)
            } else {
                mynotes.push(OpenNotes)
            }

            localStorage.setItem('submitnotes', JSON.stringify(mynotes));
        }
        setMyNoteDetails({ note: '', notedate: '', notetime: "" })
    }
    const [width, setWidth] = useState(window.innerWidth);
    const widthRef = useRef(window.innerWidth);
    useEffect(() => {
        const handleResize = () => {
            if (widthRef.current !== window.innerWidth) {
                setWidth(window.innerWidth);
                widthRef.current = window.innerWidth;
            }
        };
        window.addEventListener("resize", handleResize);
        return () => window.removeEventListener("resize", handleResize);
    }, []);
    useEffect(()=>{
        if(width<=480){
            console.log("Enter")
        }else{
            console.log("Exit")
        }
    },[width])
    return (
        <>
            <div className='firstdiv'>
                <div className='notedivoption' id='leftnotediv'>
                    <div className='divheading'>
                        <h1 className='pocektnoteheading' >Pocket Note</h1>
                    </div>
                    <br />
                    <div className='divfirstouteroptionlist'>
                        <div className='disouteroptionlist'>
                            {notelist ? notelist.map((value, index) => {
                                const [firstName, lastName] = value.name.split(" ");
                                const firstCharFirstName = firstName ? firstName[0] : "";
                                const firstCharLastName = lastName ? lastName[0] : '';
                                return <div key={index} className='divoptionlist' onClick={() => { handleopenNotes(value) }}>
                                    <div className='divchoicecircle' style={{ backgroundColor: `${value.color}` }}>{firstCharFirstName + firstCharLastName}</div>
                                    <div>
                                        {value.name}
                                    </div>
                                </div>
                            }) : "No Data"}
                        </div>
                        <button className='addnotebutton ' onClick={() => setMyShowForm(true)}>+</button>
                    </div>
                </div>
                <div className='notedivcontent' id='rightnotediv'>
                    {OpenNotes === undefined ? <div className='noNotesdiv'>
                        <img src={image1} alt="nonotes" className='imagenonotes' />
                        <div>
                            <h1 style={{ margin: '0px' }}>Pocket Notes</h1>
                            <p>Send and receive messages without keeping your phone online. <br />
                                Use Pocket Notes on up to 4 linked devices and 1 mobile phone</p>
                        </div>
                    </div> :
                        <div className='noteareadiv'>
                            <div className='notenavbar'>
                                <div>
                                    <img src={arrowbutton} alt="<---" className='arrowimage' onClick={handleMobileviewclose} />
                                </div>
                                <div className='divchoicecircle' style={{ backgroundColor: `${OpenNotes.color}`, border: "none" }}>{OpenNotes.iconname}</div>
                                <div style={{ fontSize: '20px' }}>
                                    {OpenNotes.name}
                                </div>
                            </div>
                            <div style={{ overflowY: "scroll", height: "27rem" }}>
                                {mynotes.map((element, index) => (
                                    <div key={index}>
                                        {element.name === OpenNotes.name && element.notes.map((value, index) => (
                                            <div className='contentbox' key={index}>
                                                <div style={{ textAlign: "justify", lineHeight: '24px' }}>{value.note}</div>
                                                <div style={{ textAlign: 'end', fontWeight: "600", marginTop: '2px' }}>{value.notedate}  &bull; {value.notetime}</div>
                                            </div>
                                        ))
                                        }
                                    </div>
                                ))}
                            </div>
                            <div>
                                <div className='textareadiv'>
                                    <textarea name="note" id="inputnotes" cols={130} rows={7} value={NotesDetails.note} onChange={handlechange} placeholder='Hereâ€™s the sample text for sample work'></textarea>
                                </div>
                                <img src={sendbutton} alt="send button" className='imagebutton' onClick={handleupdatetime} />
                            </div>
                        </div>}
                </div>
            </div>
            {Showform && <CreateNoteForm formpop={formpop} closeform={() => setMyShowForm(false)} />}
        </>
    )
}

export default Page1